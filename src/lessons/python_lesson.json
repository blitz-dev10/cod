[
    {
      "id": 1,
      "language": "Python",
      "title": "Introduction to Python",
      "description": "Learn the basics of Python programming.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will cover basic Python syntax and how to print to the console."
        },
        {
          "type": "code",
          "content": "print('Hello, World!')"
        }
      ],
      "test": {
        "question": "Write a code to print Hello, World! on the output",
        "code": "Hello, World!",
        "expected_output": "Hello, World!"
      }
    },
    {
      "id": 2,
      "language": "Python",
      "title": "Variables and Data Types",
      "description": "Learn how to declare variables and use basic data types in Python.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will discuss how to declare variables and the different types of data in Python, such as strings, integers, and floats."
        },
        {
          "type": "code",
          "content": "x = 5\nname = 'John'\nprint(x, name)"
        }
      ],
      "test": {
        "question": "Write a code in Python to print age and name",
        "code": "5 John",
        "expected_output": "5 John"
      }
    },
    {
      "id": 3,
      "language": "Python",
      "title": "Loops in Python",
      "description": "Learn how to use loops in Python.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will learn how to use for and while loops in Python to iterate over sequences."
        },
        {
          "type": "code",
          "content": "for i in range(5):\n    print(i)"
        }
      ],
      "test": {
        "question": "Write a code in python to print numbers from 1 to 5",
        "code": "0\n1\n2\n3\n4",
        "expected_output": "0\n1\n2\n3\n4"
      }
    },
    {
      "id": 4,
      "language": "Python",
      "title": "Python Lists",
      "description": "Learn how to work with lists in Python.",
      "content": [
        {
          "type": "text",
          "content": "Lists are one of Python's most versatile data types. They allow you to store multiple items in a single variable. In this lesson, we'll learn how to create and manipulate lists."
        },
        {
          "type": "code",
          "content": "numbers = [1, 2, 3, 4, 5]\nprint(numbers[0])  # First element\nprint(numbers[-1]) # Last element"
        }
      ],
      "test": {
        "question": "Create a list with numbers [10, 20, 30] and print all elements on separate lines",
        "code": "numbers = [10, 20, 30]\nfor n in numbers:\n    print(n)",
        "expected_output": "10\n20\n30"
      }
    },
    {
      "id": 5,
      "language": "Python",
      "title": "String Operations",
      "description": "Learn how to manipulate strings in Python.",
      "content": [
        {
          "type": "text",
          "content": "Strings in Python are very flexible and come with many built-in methods. We'll learn about string concatenation, formatting, and common string operations."
        },
        {
          "type": "code",
          "content": "name = 'Python'\nprint(len(name))\nprint(name.upper())"
        }
      ],
      "test": {
        "question": "Create a string 'Programming' and print its length and then the string in uppercase, each on a new line",
        "code": "text = 'Programming'\nprint(len(text))\nprint(text.upper())",
        "expected_output": "11\nPROGRAMMING"
      }
    },
    {
      "id": 6,
      "language": "Python",
      "title": "Basic Functions",
      "description": "Learn how to create and use functions in Python.",
      "content": [
        {
          "type": "text",
          "content": "Functions help us organize code into reusable blocks. In this lesson, we'll learn how to define functions, pass parameters, and return values."
        },
        {
          "type": "code",
          "content": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(result)"
        }
      ],
      "test": {
        "question": "Create a function called 'multiply' that takes two numbers and prints their product. Call it with 6 and 4",
        "code": "def multiply(a, b):\n    print(a * b)\n\nmultiply(6, 4)",
        "expected_output": "24"
      }
    },
    {
      "id": 7,
      "language": "Python",
      "title": "List Methods",
      "description": "Learn about built-in list methods in Python.",
      "content": [
        {
          "type": "text",
          "content": "Python lists come with many useful methods like append(), pop(), and sort(). We'll learn how to use these methods to manipulate lists effectively."
        },
        {
          "type": "code",
          "content": "fruits = ['apple', 'banana']\nfruits.append('orange')\nprint(len(fruits))\nprint(fruits)"
        }
      ],
      "test": {
        "question": "Create a list with [5, 10], append 15, then print all numbers on one line separated by spaces",
        "code": "numbers = [5, 10]\nnumbers.append(15)\nprint(' '.join(map(str, numbers)))",
        "expected_output": "5 10 15"
      }
    },
    {
      "id": 8,
      "language": "Python",
      "title": "Math Operations",
      "description": "Learn about mathematical operations in Python.",
      "content": [
        {
          "type": "text",
          "content": "Python provides various mathematical operations and built-in functions. We'll learn about basic arithmetic, division types, and common math operations."
        },
        {
          "type": "code",
          "content": "a = 10\nb = 3\nprint(a + b)\nprint(a * b)\nprint(a / b)"
        }
      ],
      "test": {
        "question": "Calculate and print the average of numbers 10, 20, and 30",
        "code": "numbers = [10, 20, 30]\nprint(sum(numbers) // len(numbers))",
        "expected_output": "20"
      }
    },
    {
      "id": 9,
      "language": "Python",
      "title": "Dictionaries",
      "description": "Learn how to work with dictionaries in Python.",
      "content": [
        {
          "type": "text",
          "content": "Dictionaries are key-value pairs that allow us to store and retrieve data using unique keys. We'll learn how to create, modify, and access dictionary elements."
        },
        {
          "type": "code",
          "content": "person = {'name': 'John', 'age': 25}\nprint(person['name'])\nprint(person['age'])"
        }
      ],
      "test": {
        "question": "Create a dictionary for a book with title 'Python' and pages 300, then print them on separate lines",
        "code": "book = {'title': 'Python', 'pages': 300}\nprint(book['title'])\nprint(book['pages'])",
        "expected_output": "Python\n300"
      }
    },
    {
      "id": 10,
      "language": "Python",
      "title": "String Formatting",
      "description": "Learn about string formatting methods in Python.",
      "content": [
        {
          "type": "text",
          "content": "Python offers several ways to format strings. We'll learn about f-strings and the format() method to create well-formatted text output."
        },
        {
          "type": "code",
          "content": "name = 'Alice'\nage = 20\nprint(f'{name} is {age} years old')"
        }
      ],
      "test": {
        "question": "Using f-strings, create a string that combines the word 'Score:' with the number 100",
        "code": "score = 100\nprint(f'Score: {score}')",
        "expected_output": "Score: 100"
      }
    },
    {
      "id": 11,
      "language": "Python",
      "title": "List Comprehension",
      "description": "Learn about list comprehension in Python.",
      "content": [
        {
          "type": "text",
          "content": "List comprehension provides a concise way to create lists. It's a powerful feature that combines a for loop and list creation into one line."
        },
        {
          "type": "code",
          "content": "numbers = [1, 2, 3]\ndoubled = [x * 2 for x in numbers]\nprint(doubled)"
        }
      ],
      "test": {
        "question": "Create a list of numbers [1, 2, 3, 4, 5] and use list comprehension to multiply each by 3. Print results on one line separated by spaces",
        "code": "numbers = [1, 2, 3, 4, 5]\nresult = [x * 3 for x in numbers]\nprint(' '.join(map(str, result)))",
        "expected_output": "3 6 9 12 15"
      }
    },
    {
      "id": 12,
      "language": "Python",
      "title": "Tuple Basics",
      "description": "Learn about tuples in Python.",
      "content": [
        {
          "type": "text",
          "content": "Tuples are immutable sequences in Python. They're similar to lists but can't be changed after creation. We'll learn when and how to use tuples effectively."
        },
        {
          "type": "code",
          "content": "coordinates = (10, 20)\nx, y = coordinates\nprint(f'X: {x}, Y: {y}')"
        }
      ],
      "test": {
        "question": "Create a tuple with values (100, 200) and print both numbers on separate lines",
        "code": "numbers = (100, 200)\nprint(numbers[0])\nprint(numbers[1])",
        "expected_output": "100\n200"
      }
    },
    {
      "id": 13,
      "language": "Python",
      "title": "Range Function",
      "description": "Learn about the range function in Python.",
      "content": [
        {
          "type": "text",
          "content": "The range function generates a sequence of numbers. It's commonly used with for loops and list creation. We'll learn about different ways to use range."
        },
        {
          "type": "code",
          "content": "for i in range(1, 5):\n    print(i)"
        }
      ],
      "test": {
        "question": "Use range to print even numbers from 2 to 8 (inclusive) on separate lines",
        "code": "for i in range(2, 10, 2):\n    print(i)",
        "expected_output": "2\n4\n6\n8"
      }
    },
    {
      "id": 14,
      "language": "Python",
      "title": "String Methods",
      "description": "Learn about string manipulation methods.",
      "content": [
        {
          "type": "text",
          "content": "Python strings have many useful methods for manipulation. We'll learn about methods like split(), join(), and replace() to process text effectively."
        },
        {
          "type": "code",
          "content": "text = 'Hello Python'\nprint(text.split())\nprint('-'.join(['a', 'b', 'c']))"
        }
      ],
      "test": {
        "question": "Take the string 'Python is fun' and print only the word 'Python'",
        "code": "text = 'Python is fun'\nprint(text.split()[0])",
        "expected_output": "Python"
      }
    },
    {
      "id": 15,
      "language": "Python",
      "title": "Number Formatting",
      "description": "Learn about number formatting in Python.",
      "content": [
        {
          "type": "text",
          "content": "Python provides several ways to format numbers. We'll learn about rounding, decimal places, and string formatting for numbers."
        },
        {
          "type": "code",
          "content": "number = 123.456789\nprint(f'{number:.2f}')"
        }
      ],
      "test": {
        "question": "Format the number 123.456789 to show exactly 2 decimal places",
        "code": "number = 123.456789\nprint(f'{number:.2f}')",
        "expected_output": "123.46"
      }
    },
    {
      "id": 16,
      "language": "Python",
      "title": "List Slicing",
      "description": "Learn about list slicing in Python.",
      "content": [
        {
          "type": "text",
          "content": "List slicing allows us to extract parts of a list. We can specify start, end, and step values to get exactly the elements we want."
        },
        {
          "type": "code",
          "content": "numbers = [0, 1, 2, 3, 4, 5]\nprint(numbers[1:4])\nprint(numbers[::2])"
        }
      ],
      "test": {
        "question": "Create a list [1,2,3,4,5] and print every second element starting from index 0",
        "code": "numbers = [1, 2, 3, 4, 5]\nprint(' '.join(map(str, numbers[::2])))",
        "expected_output": "1 3 5"
      }
    },
    {
      "id": 17,
      "language": "Python",
      "title": "List Patterns",
      "description": "Learn to create and manipulate list patterns.",
      "content": [
        {
          "type": "text",
          "content": "We can create interesting patterns using lists and loops. This lesson combines our knowledge of lists, loops, and math operations to create number patterns."
        },
        {
          "type": "code",
          "content": "pattern = []\nfor i in range(5):\n    pattern.append(i * 2)\nprint(pattern)"
        }
      ],
      "test": {
        "question": "Create a list of 5 elements where each element is triple the previous element, starting with 1. Print all elements on one line separated by spaces",
        "code": "result = [1]\nfor i in range(4):\n    result.append(result[-1] * 3)\nprint(' '.join(map(str, result)))",
        "expected_output": "1 3 9 27 81"
      }
    },
    {
      "id": 18,
      "language": "Python",
      "title": "Dictionary Methods",
      "description": "Learn advanced dictionary operations in Python.",
      "content": [
        {
          "type": "text",
          "content": "Dictionaries in Python are like magical containers that can store pairs of related information! Imagine having a contact book where each person's name is connected to their phone number. In this lesson, we'll explore all the cool things we can do with dictionaries - like adding new pairs, removing them, finding specific information, and even combining two dictionaries. We'll learn about special methods like .get(), .keys(), .values(), and .items() that make working with dictionaries super easy and fun!"
        },
        {
          "type": "code",
          "content": "contacts = {'Alice': 123, 'Bob': 456}\ncontacts['Charlie'] = 789\nprint(contacts.get('Alice'))\nprint(list(contacts.keys()))"
        }
      ],
      "test": {
        "question": "Create a dictionary with colors 'red' and 'blue' mapped to values 1 and 2, then print all keys on one line separated by spaces",
        "code": "colors = {'red': 1, 'blue': 2}\nprint(' '.join(colors.keys()))",
        "expected_output": "red blue"
      }
    },
    {
      "id": 19,
      "language": "Python",
      "title": "Sets in Python",
      "description": "Learn about sets and their operations.",
      "content": [
        {
          "type": "text",
          "content": "Sets are special collections in Python that only store unique items - like a box that automatically removes duplicates! Think of it like collecting trading cards: if you already have a card, getting another same card doesn't add to your collection. Sets are super useful when we want to eliminate duplicates or check if items are unique. We can also do cool mathematical operations like finding common elements between two sets (intersection) or combining sets (union). It's like having a smart collection that helps us organize unique items!"
        },
        {
          "type": "code",
          "content": "numbers = {1, 2, 2, 3, 3, 4}\nprint(numbers)  # Duplicates removed\nmore_numbers = {3, 4, 5}\nprint(numbers.intersection(more_numbers))"
        }
      ],
      "test": {
        "question": "Create a set with numbers [1,2,2,3,3,3] and print the unique numbers separated by spaces in sorted order",
        "code": "numbers = {1, 2, 2, 3, 3, 3}\nprint(' '.join(map(str, sorted(numbers))))",
        "expected_output": "1 2 3"
      }
    },
    {
      "id": 20,
      "language": "Python",
      "title": "List Methods Advanced",
      "description": "Learn advanced list operations and methods.",
      "content": [
        {
          "type": "text",
          "content": "Lists in Python can do way more than just store items! They're like a smart container with special powers. In this lesson, we'll discover cool list methods that can reverse our list, sort items, count how many times something appears, and even insert items at specific positions. We'll learn about .insert(), .count(), .reverse(), .sort(), and more! These methods are like having a magic wand that can organize and rearrange our items exactly how we want them."
        },
        {
          "type": "code",
          "content": "numbers = [3, 1, 4, 1, 5]\nprint(numbers.count(1))\nnumbers.sort()\nprint(numbers)\nnumbers.reverse()\nprint(numbers)"
        }
      ],
      "test": {
        "question": "Create a list [5,2,8,1,9], sort it in ascending order, and print the numbers separated by spaces",
        "code": "numbers = [5,2,8,1,9]\nnumbers.sort()\nprint(' '.join(map(str, numbers)))",
        "expected_output": "1 2 5 8 9"
      }
    },
    {
      "id": 21,
      "language": "Python",
      "title": "String Methods Advanced",
      "description": "Learn advanced string manipulation techniques.",
      "content": [
        {
          "type": "text",
          "content": "Strings in Python are like pieces of text that know lots of cool tricks! We can make them uppercase or lowercase, remove unwanted spaces, find and replace words, and even check if they start or end with specific letters. It's like having a text editor with magical powers! We'll learn about methods like .strip(), .replace(), .startswith(), .endswith(), and more. These methods help us clean up and transform text exactly how we want it."
        },
        {
          "type": "code",
          "content": "text = '  Hello, Python!  '\nprint(text.strip())\nprint(text.replace('Python', 'World'))\nprint(text.startswith('  Hello'))"
        }
      ],
      "test": {
        "question": "Take the string '  Python  ', remove leading and trailing spaces, convert to uppercase, and print it",
        "code": "text = '  Python  '\nprint(text.strip().upper())",
        "expected_output": "PYTHON"
      }
    },
    {
      "id": 22,
      "language": "Python",
      "title": "Dictionary Comprehension",
      "description": "Learn how to create dictionaries using comprehension.",
      "content": [
        {
          "type": "text",
          "content": "Dictionary comprehension is like a super-fast way to create dictionaries! Just like list comprehension, it lets us create dictionaries in a single line of code. Imagine being able to create a dictionary that pairs numbers with their squares, or words with their lengths, all in one simple expression. It's like having a magic recipe that instantly creates a dictionary exactly how we want it. This makes our code shorter, cleaner, and more fun to write!"
        },
        {
          "type": "code",
          "content": "numbers = [1, 2, 3, 4]\nsquares = {x: x**2 for x in numbers}\nprint(squares)"
        }
      ],
      "test": {
        "question": "Create a dictionary where keys are numbers 1,2,3 and values are their doubles. Print all values separated by spaces.",
        "code": "d = {x: x*2 for x in [1,2,3]}\nprint(' '.join(map(str, d.values())))",
        "expected_output": "2 4 6"
      }
    },
    {
      "id": 23,
      "language": "Python",
      "title": "Nested Data Structures",
      "description": "Learn how to work with nested lists and dictionaries.",
      "content": [
        {
          "type": "text",
          "content": "Sometimes we need to store complex information that's like boxes within boxes! Nested data structures let us store lists inside lists, or dictionaries inside dictionaries. Think of it like organizing your toys: you might have a big box containing smaller boxes, each with different types of toys. We'll learn how to create and access these nested structures, which is super useful when dealing with more complex data like game levels, character inventories, or student grades!"
        },
        {
          "type": "code",
          "content": "students = [\n    {'name': 'Alice', 'grades': [90, 95, 88]},\n    {'name': 'Bob', 'grades': [85, 82, 90]}\n]\nprint(students[0]['grades'][0])"
        }
      ],
      "test": {
        "question": "Create a list containing two dictionaries with 'name' and 'score' keys. Print each name and score on separate lines.",
        "code": "players = [{'name': 'Player1', 'score': 100}, {'name': 'Player2', 'score': 200}]\nfor p in players:\n    print(f\"{p['name']} {p['score']}\")",
        "expected_output": "Player1 100\nPlayer2 200"
      }
    },
    {
      "id": 24,
      "language": "Python",
      "title": "Multiple List Operations",
      "description": "Learn how to perform multiple operations on lists efficiently.",
      "content": [
        {
          "type": "text",
          "content": "When working with lists, we often need to do several operations at once! In this lesson, we'll learn how to combine different list operations to solve more complex problems. We'll explore how to filter, transform, and combine lists in creative ways. It's like being a list wizard who can perform multiple tricks at once! We'll see how to use sorting, filtering, and mapping operations together to create powerful list transformations."
        },
        {
          "type": "code",
          "content": "numbers = [1, -2, 3, -4, 5]\npositive = [x for x in numbers if x > 0]\nsorted_squares = sorted([x**2 for x in positive])\nprint(sorted_squares)"
        }
      ],
      "test": {
        "question": "Create a list of numbers [1,4,2,5,3], sort it, multiply each by 2, and print results separated by spaces",
        "code": "numbers = [1,4,2,5,3]\nresult = [x*2 for x in sorted(numbers)]\nprint(' '.join(map(str, result)))",
        "expected_output": "2 4 6 8 10"
      }
    },
    {
      "id": 25,
      "language": "Python",
      "title": "String and List Conversions",
      "description": "Learn how to convert between strings and lists.",
      "content": [
        {
          "type": "text",
          "content": "Sometimes we need to switch between strings and lists - it's like transforming between different types of containers! We'll learn how to split strings into lists and join lists back into strings. This is super useful when working with text data or formatting output. Think of it like having a magic wand that can turn a sentence into a list of words, or take a list of words and create a nice-looking sentence. We'll explore methods like split(), join(), and list() to perform these conversions easily!"
        },
        {
          "type": "code",
          "content": "sentence = 'Python is awesome'\nwords = sentence.split()\nprint(words)\nnew_sentence = ' '.join(words)\nprint(new_sentence)"
        }
      ],
      "test": {
        "question": "Split the string 'one two three' into a list, sort the words, and join them back with spaces",
        "code": "text = 'one two three'\nwords = text.split()\nprint(' '.join(sorted(words)))",
        "expected_output": "one three two"
      }
    }
  ]
  