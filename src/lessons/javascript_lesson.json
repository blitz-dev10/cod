[
    {
      "id": 1,
      "language": "JavaScript",
      "title": "Introduction to JavaScript",
      "description": "Learn the basics of JavaScript programming.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will cover basic JavaScript syntax and how to print to the console."
        },
        {
          "type": "code",
          "content": "console.log(\"Hello, World!\");"
        }
      ],
      "test": {
        "question": "Write a JavaScript program to print Hello, World! on the output",
        "code": "console.log(\"Hello, World!\");",
        "expected_output": "Hello, World!"
      }
    },
    {
      "id": 2,
      "language": "JavaScript",
      "title": "JavaScript Variables and Data Types",
      "description": "Learn how to declare variables and use basic data types in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will learn about JavaScript variables and data types."
        },
        {
          "type": "code",
          "content": "let age = 25;\nlet height = 5.9;\nlet name = \"John\";\nconsole.log(\"Name: \" + name);\nconsole.log(\"Age: \" + age);\nconsole.log(\"Height: \" + height);"
        }
      ],
      "test": {
        "question": "Declare a variable 'age' with value 30 and print it.",
        "code": "let age = 30;\nconsole.log(age);",
        "expected_output": "30"
      }
    },
    {
      "id": 3,
      "language": "JavaScript",
      "title": "JavaScript Conditional Statements",
      "description": "Learn how to use if-else statements in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will learn how to use if-else statements to control the flow of execution."
        },
        {
          "type": "code",
          "content": "let number = 10;\nif (number > 0) {\n  console.log(\"Positive Number\");\n} else {\n  console.log(\"Negative Number\");\n}"
        }
      ],
      "test": {
        "question": "Write a JavaScript program to check if a number is positive or negative.",
        "code": "let number = -5;\nif (number > 0) {\n  console.log(\"Positive Number\");\n} else {\n  console.log(\"Negative Number\");\n}",
        "expected_output": "Negative Number"
      }
    },
    {
      "id": 4,
      "language": "JavaScript",
      "title": "For Loops in JavaScript",
      "description": "Learn how to use for loops to repeat actions.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we'll learn about for loops in JavaScript. A for loop allows you to execute a block of code multiple times. The for loop has three parts: initialization, condition, and increment/decrement. It's perfect for when you know exactly how many times you want to repeat something."
        },
        {
          "type": "code",
          "content": "for(let i = 1; i <= 5; i++) {\n  console.log('Count: ' + i);\n}"
        }
      ],
      "test": {
        "question": "Write a program that prints numbers from 1 to 5 using a for loop. Each number should be on a new line.",
        "code": "// Write your code here",
        "expected_output": "1\n2\n3\n4\n5"
      }
    },
    {
      "id": 5,
      "language": "JavaScript",
      "title": "While Loops",
      "description": "Learn how to use while loops for repeated actions.",
      "content": [
        {
          "type": "text",
          "content": "While loops execute a block of code as long as a condition is true. They're particularly useful when you don't know exactly how many iterations you'll need. In this lesson, we'll explore how while loops work and when to use them."
        },
        {
          "type": "code",
          "content": "let count = 1;\nwhile(count <= 3) {\n  console.log('Loop iteration: ' + count);\n  count++;\n}"
        }
      ],
      "test": {
        "question": "Write a program using a while loop that prints 'Hello' exactly 3 times, each on a new line.",
        "code": "// Write your code here",
        "expected_output": "Hello\nHello\nHello"
      }
    },
    {
      "id": 6,
      "language": "JavaScript",
      "title": "Arrays Basics",
      "description": "Learn how to work with arrays to store multiple values.",
      "content": [
        {
          "type": "text",
          "content": "Arrays are special variables that can hold multiple values. Think of an array as a list of items. In JavaScript, arrays can store different types of data, and we can easily add or remove items. In this lesson, we'll learn the basics of working with arrays."
        },
        {
          "type": "code",
          "content": "let numbers = [1, 2, 3, 4, 5];\nconsole.log('First number: ' + numbers[0]);\nconsole.log('Last number: ' + numbers[4]);"
        }
      ],
      "test": {
        "question": "Create an array with values [10, 20, 30] and print all elements on separate lines.",
        "code": "// Write your code here",
        "expected_output": "10\n20\n30"
      }
    },
    {
      "id": 7,
      "language": "JavaScript",
      "title": "Array Methods",
      "description": "Learn how to manipulate arrays using built-in methods.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript provides many useful methods to work with arrays. In this lesson, we'll learn about common array methods like push(), pop(), and length. These methods make it easy to modify arrays and access their elements."
        },
        {
          "type": "code",
          "content": "let fruits = ['apple', 'banana'];\nfruits.push('orange');\nconsole.log(fruits.length);\nconsole.log(fruits.join(', '));"
        }
      ],
      "test": {
        "question": "Create an array with two numbers [5, 10], add 15 using push(), then print all numbers on one line separated by spaces.",
        "code": "// Write your code here",
        "expected_output": "5 10 15"
      }
    },
    {
      "id": 8,
      "language": "JavaScript",
      "title": "Functions Basics",
      "description": "Learn how to create and use functions.",
      "content": [
        {
          "type": "text",
          "content": "Functions are blocks of reusable code that perform specific tasks. They help us organize our code and make it more efficient. In this lesson, we'll learn how to create functions, pass parameters to them, and return values."
        },
        {
          "type": "code",
          "content": "function addNumbers(a, b) {\n  return a + b;\n}\n\nlet result = addNumbers(5, 3);\nconsole.log('Sum: ' + result);"
        }
      ],
      "test": {
        "question": "Create a function called 'multiply' that takes two numbers and returns their product. Call it with 6 and 4 and print the result.",
        "code": "// Write your code here",
        "expected_output": "24"
      }
    },
    {
      "id": 9,
      "language": "JavaScript",
      "title": "String Operations",
      "description": "Learn how to manipulate strings in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "Strings in JavaScript come with many built-in methods that make text manipulation easy. We'll learn about common string operations like finding length, changing case, and combining strings."
        },
        {
          "type": "code",
          "content": "let text = 'Hello JavaScript';\nconsole.log('Length: ' + text.length);\nconsole.log('Uppercase: ' + text.toUpperCase());"
        }
      ],
      "test": {
        "question": "Create a string with value 'Programming' and print its length followed by the string in uppercase, each on a new line.",
        "code": "// Write your code here",
        "expected_output": "11\nPROGRAMMING"
      }
    },
    {
      "id": 10,
      "language": "JavaScript",
      "title": "Math Operations",
      "description": "Learn about mathematical operations in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript provides various mathematical operations and a Math object with useful methods. We'll learn about basic arithmetic and some common math functions."
        },
        {
          "type": "code",
          "content": "let a = 10;\nlet b = 3;\nconsole.log('Sum: ' + (a + b));\nconsole.log('Product: ' + (a * b));\nconsole.log('Division: ' + (a / b));"
        }
      ],
      "test": {
        "question": "Calculate and print the average of numbers 10, 20, and 30.",
        "code": "// Write your code here",
        "expected_output": "20"
      }
    },
    {
      "id": 11,
      "language": "JavaScript",
      "title": "Object Basics",
      "description": "Learn how to work with objects in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "Objects are containers for named values called properties. They're fundamental to JavaScript and allow us to group related data together. We'll learn how to create and use basic objects."
        },
        {
          "type": "code",
          "content": "let person = {\n  name: 'John',\n  age: 25\n};\nconsole.log(person.name);\nconsole.log(person.age);"
        }
      ],
      "test": {
        "question": "Create an object representing a book with title 'JavaScript' and pages 300, then print them on separate lines.",
        "code": "// Write your code here",
        "expected_output": "JavaScript\n300"
      }
    },
    {
      "id": 12,
      "language": "JavaScript",
      "title": "Template Literals",
      "description": "Learn about modern string interpolation.",
      "content": [
        {
          "type": "text",
          "content": "Template literals provide an elegant way to create strings with embedded expressions. They use backticks (`) and ${} for expressions, making string formatting much cleaner."
        },
        {
          "type": "code",
          "content": "let name = 'Alice';\nlet age = 20;\nconsole.log(`${name} is ${age} years old`);"
        }
      ],
      "test": {
        "question": "Using template literals, create a string that combines the word 'Score:' with the number 100.",
        "code": "// Write your code here",
        "expected_output": "Score: 100"
      }
    },
    {
      "id": 13,
      "language": "JavaScript",
      "title": "Array Iteration",
      "description": "Learn different ways to iterate over arrays.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript offers several ways to iterate over arrays. We'll learn about forEach and how to process each element of an array effectively."
        },
        {
          "type": "code",
          "content": "let numbers = [1, 2, 3];\nnumbers.forEach(function(number) {\n  console.log(number * 2);\n});"
        }
      ],
      "test": {
        "question": "Create an array [1, 2, 3] and print each number doubled on a new line using forEach.",
        "code": "// Write your code here",
        "expected_output": "2\n4\n6"
      }
    },
    {
      "id": 14,
      "language": "JavaScript",
      "title": "Switch Statements",
      "description": "Learn how to use switch statements for multiple conditions.",
      "content": [
        {
          "type": "text",
          "content": "Switch statements provide a clean way to handle multiple conditions. They're especially useful when comparing a single value against several possible matches."
        },
        {
          "type": "code",
          "content": "let day = 1;\nswitch(day) {\n  case 1:\n    console.log('Monday');\n    break;\n  case 2:\n    console.log('Tuesday');\n    break;\n  default:\n    console.log('Other day');\n}"
        }
      ],
      "test": {
        "question": "Write a program using switch statement that prints 'Good' for number 1, 'Better' for number 2, and 'Best' for number 3. Use number 2.",
        "code": "// Write your code here",
        "expected_output": "Better"
      }
    },
    {
      "id": 15,
      "language": "JavaScript",
      "title": "Array Methods Advanced",
      "description": "Learn about map and filter array methods.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript arrays have powerful methods like map() and filter() that help transform and filter array elements. These methods make array manipulation more elegant and functional."
        },
        {
          "type": "code",
          "content": "let numbers = [1, 2, 3];\nlet doubled = numbers.map(x => x * 2);\nconsole.log(doubled.join(' '));"
        }
      ],
      "test": {
        "question": "Create an array [1, 2, 3, 4, 5] and use map to multiply each number by 3. Print results on one line separated by spaces.",
        "code": "// Write your code here",
        "expected_output": "3 6 9 12 15"
      }
    },
    {
      "id": 16,
      "language": "JavaScript",
      "title": "String Methods",
      "description": "Learn advanced string manipulation methods.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript strings have many useful methods for manipulation. We'll learn about methods like substring(), replace(), and split() to process text effectively."
        },
        {
          "type": "code",
          "content": "let text = 'Hello World';\nconsole.log(text.substring(0, 5));\nconsole.log(text.replace('World', 'JavaScript'));"
        }
      ],
      "test": {
        "question": "Take the string 'JavaScript is fun' and print only the word 'JavaScript'.",
        "code": "// Write your code here",
        "expected_output": "JavaScript"
      }
    },
    {
      "id": 17,
      "language": "JavaScript",
      "title": "Number Methods",
      "description": "Learn about number formatting and conversion.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript provides several methods to format and convert numbers. We'll learn about toFixed(), parseInt(), and other number-related operations."
        },
        {
          "type": "code",
          "content": "let num = 123.456;\nconsole.log(num.toFixed(2));\nconsole.log(parseInt('42'));"
        }
      ],
      "test": {
        "question": "Convert the number 123.456789 to show exactly 2 decimal places.",
        "code": "// Write your code here",
        "expected_output": "123.46"
      }
    },
    {
      "id": 18,
      "language": "JavaScript",
      "title": "Array Patterns",
      "description": "Learn to create and manipulate array patterns.",
      "content": [
        {
          "type": "text",
          "content": "We can create interesting patterns using arrays and loops. This lesson combines our knowledge of arrays, loops, and math operations to create number patterns."
        },
        {
          "type": "code",
          "content": "let sequence = [];\nfor(let i = 0; i < 5; i++) {\n  sequence.push(i * 2);\n}\nconsole.log(sequence.join(' '));"
        }
      ],
      "test": {
        "question": "Create an array of 5 elements where each element is triple the previous element, starting with 1. Print all elements on one line separated by spaces.",
        "code": "// Write your code here",
        "expected_output": "1 3 9 27 81"
      }
    },
    {
      "id": 19,
      "language": "JavaScript",
      "title": "Object Methods",
      "description": "Learn how to add functions to objects.",
      "content": [
        {
          "type": "text",
          "content": "Objects in JavaScript can have their own functions, which we call methods! Think of an object like a robot, and methods are like special commands that the robot knows how to do. For example, a calculator object might have methods to add, subtract, or multiply numbers. These methods make our objects more powerful and useful. In this lesson, we'll learn how to create objects with their own special methods and see how they can make our code more organized and fun to use. Just like how a TV remote has different buttons for different actions, our objects can have different methods for different tasks!"
        },
        {
          "type": "code",
          "content": "let calculator = {\n  value: 0,\n  add: function(x) {\n    this.value += x;\n  },\n  getResult: function() {\n    return this.value;\n  }\n};\n\ncalculator.add(5);\nconsole.log(calculator.getResult());"
        }
      ],
      "test": {
        "question": "Create a counter object with methods 'increment' and 'getValue'. Increment twice and print the value.",
        "code": "let counter = {\n  count: 0,\n  increment: function() {\n    this.count += 1;\n  },\n  getValue: function() {\n    return this.count;\n  }\n};\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.getValue());",
        "expected_output": "2"
      }
    },
    {
      "id": 20,
      "language": "JavaScript",
      "title": "Array of Objects",
      "description": "Learn how to work with arrays containing objects.",
      "content": [
        {
          "type": "text",
          "content": "Imagine having a collection of trading cards, where each card has different information like the character's name, power level, and special abilities. In JavaScript, we can create something similar using an array of objects! Each object in the array is like a single card, storing multiple pieces of information together. This is super useful when we need to manage lists of things where each item has multiple properties. It's like having a digital collection of cards that we can easily sort, search through, or display in different ways. We'll learn how to create these collections and do cool things with them!"
        },
        {
          "type": "code",
          "content": "let students = [\n  { name: 'Alice', age: 14, grade: 'A' },\n  { name: 'Bob', age: 15, grade: 'B' }\n];\n\nfor(let student of students) {\n  console.log(`${student.name}: ${student.grade}`);\n}"
        }
      ],
      "test": {
        "question": "Create an array of two game character objects with 'name' and 'level' properties. Print each character's info on a new line.",
        "code": "let characters = [\n  {name: 'Warrior', level: 10},\n  {name: 'Mage', level: 8}\n];\n\nfor(let char of characters) {\n  console.log(`${char.name} ${char.level}`);\n}",
        "expected_output": "Warrior 10\nMage 8"
      }
    },
    {
      "id": 21,
      "language": "JavaScript",
      "title": "String Pattern Matching",
      "description": "Learn how to search and match patterns in strings.",
      "content": [
        {
          "type": "text",
          "content": "Have you ever played a word search puzzle? JavaScript has similar abilities to find words or patterns within text! In this lesson, we'll learn how to search for specific words or letters within strings, check if a string starts or ends with certain text, and even replace parts of strings with something else. It's like having a super-powered magnifying glass that can find exactly what we're looking for in any text. This is especially useful when we need to check if someone entered the correct information or when we want to clean up text by replacing certain words."
        },
        {
          "type": "code",
          "content": "let text = 'Hello World';\nconsole.log(text.startsWith('Hello'));\nconsole.log(text.includes('World'));\nconsole.log(text.replace('World', 'JavaScript'));"
        }
      ],
      "test": {
        "question": "Check if the string 'Coding is fun!' includes the word 'fun' and print the result as true or false.",
        "code": "let text = 'Coding is fun!';\nconsole.log(text.includes('fun'));",
        "expected_output": "true"
      }
    },
    {
      "id": 22,
      "language": "JavaScript",
      "title": "Array Searching",
      "description": "Learn methods to search for elements in arrays.",
      "content": [
        {
          "type": "text",
          "content": "Finding things in arrays is like being a detective! JavaScript gives us special tools to find elements in our arrays. We can find out if an element exists, where it's located, or even find elements that match certain conditions. It's similar to searching for a specific toy in a toy box - you might want to know if you have it, where it is, or find all toys of a certain color. In this lesson, we'll learn about methods like indexOf(), includes(), and find() that help us search through arrays easily and efficiently. These methods are super helpful when we need to check if something exists in our list or find items that match specific criteria."
        },
        {
          "type": "code",
          "content": "let numbers = [10, 20, 30, 40, 50];\nconsole.log(numbers.includes(30));\nconsole.log(numbers.indexOf(40));\nlet found = numbers.find(n => n > 35);"
        }
      ],
      "test": {
        "question": "Create an array [10,20,30,40,50] and print whether it includes the number 30 followed by its index on a new line.",
        "code": "let nums = [10,20,30,40,50];\nconsole.log(nums.includes(30));\nconsole.log(nums.indexOf(30));",
        "expected_output": "true\n2"
      }
    },
    {
      "id": 23,
      "language": "JavaScript",
      "title": "Math Functions",
      "description": "Learn about useful mathematical functions in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript comes with a built-in calculator called the Math object! It's like having a super-powered calculator that can do all sorts of cool math operations. Want to round numbers? Find the biggest or smallest number? Calculate random numbers for games? The Math object can do all of this and more! In this lesson, we'll explore these fun mathematical tools that make working with numbers much easier. Whether you're creating games, calculating scores, or just need to do some basic math, these functions will be super helpful. It's like having a mathematical Swiss Army knife in your coding toolbox!"
        },
        {
          "type": "code",
          "content": "console.log(Math.round(3.7));\nconsole.log(Math.max(5, 10, 15));\nconsole.log(Math.min(5, 10, 15));\nconsole.log(Math.abs(-42));"
        }
      ],
      "test": {
        "question": "Use Math.max to find the largest number among 10, 5, and 15, then print it.",
        "code": "console.log(Math.max(10, 5, 15));",
        "expected_output": "15"
      }
    },
    {
      "id": 24,
      "language": "JavaScript",
      "title": "Array Transformation",
      "description": "Learn how to transform arrays using map and filter.",
      "content": [
        {
          "type": "text",
          "content": "Imagine having a magic wand that can transform all items in a list at once - that's what array transformation methods do! The map() method is like a conveyor belt that takes each item, does something to it, and puts the transformed item in a new array. The filter() method is like a sieve that only lets certain items through based on our rules. These methods are super powerful because they help us process lots of data quickly and easily. It's like having a robot helper that can quickly sort through your toys or multiply all your numbers without you having to do it one by one!"
        },
        {
          "type": "code",
          "content": "let numbers = [1, 2, 3, 4, 5];\nlet doubled = numbers.map(x => x * 2);\nlet evens = numbers.filter(x => x % 2 === 0);\nconsole.log('Doubled:', doubled);\nconsole.log('Evens:', evens);"
        }
      ],
      "test": {
        "question": "Create an array [1,2,3,4,5] and use map to add 10 to each number. Print results on one line separated by spaces.",
        "code": "let nums = [1,2,3,4,5];\nlet result = nums.map(x => x + 10);\nconsole.log(result.join(' '));",
        "expected_output": "11 12 13 14 15"
      }
    },
    {
      "id": 25,
      "language": "JavaScript",
      "title": "Object Properties",
      "description": "Learn advanced ways to work with object properties.",
      "content": [
        {
          "type": "text",
          "content": "Objects in JavaScript are like containers with labeled compartments. Each compartment (property) has a name and can hold different types of things. In this lesson, we'll learn cool ways to work with these properties - how to add them, remove them, check if they exist, and even list all the labels on our container! It's similar to having a toy box where you can add new toys, remove old ones, check if a certain toy exists, or make a list of all your toys. We'll also learn about different ways to access these properties, making our code more flexible and powerful!"
        },
        {
          "type": "code",
          "content": "let game = {\n  title: 'Adventure Quest',\n  level: 1\n};\n\ngame.score = 100;\ndelete game.level;\nconsole.log('title' in game);\nconsole.log(Object.keys(game));"
        }
      ],
      "test": {
        "question": "Create an object with name 'John' and age 15, then add a grade property with value 'A'. Print all properties on separate lines.",
        "code": "let student = {\n  name: 'John',\n  age: 15\n};\nstudent.grade = 'A';\nconsole.log(student.name);\nconsole.log(student.age);\nconsole.log(student.grade);",
        "expected_output": "John\n15\nA"
      }
    },
    {
      "id": 19,
      "language": "JavaScript",
      "title": "Object Methods",
      "description": "Learn how to add functions to objects.",
      "content": [
        {
          "type": "text",
          "content": "Objects in JavaScript can have their own functions, which we call methods! Think of an object like a robot, and methods are like special commands that the robot knows how to do. For example, a calculator object might have methods to add, subtract, or multiply numbers. These methods make our objects more powerful and useful. In this lesson, we'll learn how to create objects with their own special methods and see how they can make our code more organized and fun to use. Just like how a TV remote has different buttons for different actions, our objects can have different methods for different tasks!"
        },
        {
          "type": "code",
          "content": "let calculator = {\n  value: 0,\n  add: function(x) {\n    this.value += x;\n  },\n  getResult: function() {\n    return this.value;\n  }\n};\n\ncalculator.add(5);\nconsole.log(calculator.getResult());"
        }
      ],
      "test": {
        "question": "Create a counter object with methods 'increment' and 'getValue'. Increment twice and print the value.",
        "code": "let counter = {\n  count: 0,\n  increment: function() {\n    this.count += 1;\n  },\n  getValue: function() {\n    return this.count;\n  }\n};\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.getValue());",
        "expected_output": "2"
      }
    },
    {
      "id": 20,
      "language": "JavaScript",
      "title": "Array of Objects",
      "description": "Learn how to work with arrays containing objects.",
      "content": [
        {
          "type": "text",
          "content": "Imagine having a collection of trading cards, where each card has different information like the character's name, power level, and special abilities. In JavaScript, we can create something similar using an array of objects! Each object in the array is like a single card, storing multiple pieces of information together. This is super useful when we need to manage lists of things where each item has multiple properties. It's like having a digital collection of cards that we can easily sort, search through, or display in different ways. We'll learn how to create these collections and do cool things with them!"
        },
        {
          "type": "code",
          "content": "let students = [\n  { name: 'Alice', age: 14, grade: 'A' },\n  { name: 'Bob', age: 15, grade: 'B' }\n];\n\nfor(let student of students) {\n  console.log(`${student.name}: ${student.grade}`);\n}"
        }
      ],
      "test": {
        "question": "Create an array of two game character objects with 'name' and 'level' properties. Print each character's info on a new line.",
        "code": "let characters = [\n  {name: 'Warrior', level: 10},\n  {name: 'Mage', level: 8}\n];\n\nfor(let char of characters) {\n  console.log(`${char.name} ${char.level}`);\n}",
        "expected_output": "Warrior 10\nMage 8"
      }
    },
    {
      "id": 21,
      "language": "JavaScript",
      "title": "String Pattern Matching",
      "description": "Learn how to search and match patterns in strings.",
      "content": [
        {
          "type": "text",
          "content": "Have you ever played a word search puzzle? JavaScript has similar abilities to find words or patterns within text! In this lesson, we'll learn how to search for specific words or letters within strings, check if a string starts or ends with certain text, and even replace parts of strings with something else. It's like having a super-powered magnifying glass that can find exactly what we're looking for in any text. This is especially useful when we need to check if someone entered the correct information or when we want to clean up text by replacing certain words."
        },
        {
          "type": "code",
          "content": "let text = 'Hello World';\nconsole.log(text.startsWith('Hello'));\nconsole.log(text.includes('World'));\nconsole.log(text.replace('World', 'JavaScript'));"
        }
      ],
      "test": {
        "question": "Check if the string 'Coding is fun!' includes the word 'fun' and print the result as true or false.",
        "code": "let text = 'Coding is fun!';\nconsole.log(text.includes('fun'));",
        "expected_output": "true"
      }
    },
    {
      "id": 22,
      "language": "JavaScript",
      "title": "Array Searching",
      "description": "Learn methods to search for elements in arrays.",
      "content": [
        {
          "type": "text",
          "content": "Finding things in arrays is like being a detective! JavaScript gives us special tools to find elements in our arrays. We can find out if an element exists, where it's located, or even find elements that match certain conditions. It's similar to searching for a specific toy in a toy box - you might want to know if you have it, where it is, or find all toys of a certain color. In this lesson, we'll learn about methods like indexOf(), includes(), and find() that help us search through arrays easily and efficiently. These methods are super helpful when we need to check if something exists in our list or find items that match specific criteria."
        },
        {
          "type": "code",
          "content": "let numbers = [10, 20, 30, 40, 50];\nconsole.log(numbers.includes(30));\nconsole.log(numbers.indexOf(40));\nlet found = numbers.find(n => n > 35);"
        }
      ],
      "test": {
        "question": "Create an array [10,20,30,40,50] and print whether it includes the number 30 followed by its index on a new line.",
        "code": "let nums = [10,20,30,40,50];\nconsole.log(nums.includes(30));\nconsole.log(nums.indexOf(30));",
        "expected_output": "true\n2"
      }
    },
    {
      "id": 23,
      "language": "JavaScript",
      "title": "Math Functions",
      "description": "Learn about useful mathematical functions in JavaScript.",
      "content": [
        {
          "type": "text",
          "content": "JavaScript comes with a built-in calculator called the Math object! It's like having a super-powered calculator that can do all sorts of cool math operations. Want to round numbers? Find the biggest or smallest number? Calculate random numbers for games? The Math object can do all of this and more! In this lesson, we'll explore these fun mathematical tools that make working with numbers much easier. Whether you're creating games, calculating scores, or just need to do some basic math, these functions will be super helpful. It's like having a mathematical Swiss Army knife in your coding toolbox!"
        },
        {
          "type": "code",
          "content": "console.log(Math.round(3.7));\nconsole.log(Math.max(5, 10, 15));\nconsole.log(Math.min(5, 10, 15));\nconsole.log(Math.abs(-42));"
        }
      ],
      "test": {
        "question": "Use Math.max to find the largest number among 10, 5, and 15, then print it.",
        "code": "console.log(Math.max(10, 5, 15));",
        "expected_output": "15"
      }
    },
    {
      "id": 24,
      "language": "JavaScript",
      "title": "Array Transformation",
      "description": "Learn how to transform arrays using map and filter.",
      "content": [
        {
          "type": "text",
          "content": "Imagine having a magic wand that can transform all items in a list at once - that's what array transformation methods do! The map() method is like a conveyor belt that takes each item, does something to it, and puts the transformed item in a new array. The filter() method is like a sieve that only lets certain items through based on our rules. These methods are super powerful because they help us process lots of data quickly and easily. It's like having a robot helper that can quickly sort through your toys or multiply all your numbers without you having to do it one by one!"
        },
        {
          "type": "code",
          "content": "let numbers = [1, 2, 3, 4, 5];\nlet doubled = numbers.map(x => x * 2);\nlet evens = numbers.filter(x => x % 2 === 0);\nconsole.log('Doubled:', doubled);\nconsole.log('Evens:', evens);"
        }
      ],
      "test": {
        "question": "Create an array [1,2,3,4,5] and use map to add 10 to each number. Print results on one line separated by spaces.",
        "code": "let nums = [1,2,3,4,5];\nlet result = nums.map(x => x + 10);\nconsole.log(result.join(' '));",
        "expected_output": "11 12 13 14 15"
      }
    },
    {
      "id": 25,
      "language": "JavaScript",
      "title": "Object Properties",
      "description": "Learn advanced ways to work with object properties.",
      "content": [
        {
          "type": "text",
          "content": "Objects in JavaScript are like containers with labeled compartments. Each compartment (property) has a name and can hold different types of things. In this lesson, we'll learn cool ways to work with these properties - how to add them, remove them, check if they exist, and even list all the labels on our container! It's similar to having a toy box where you can add new toys, remove old ones, check if a certain toy exists, or make a list of all your toys. We'll also learn about different ways to access these properties, making our code more flexible and powerful!"
        },
        {
          "type": "code",
          "content": "let game = {\n  title: 'Adventure Quest',\n  level: 1\n};\n\ngame.score = 100;\ndelete game.level;\nconsole.log('title' in game);\nconsole.log(Object.keys(game));"
        }
      ],
      "test": {
        "question": "Create an object with name 'John' and age 15, then add a grade property with value 'A'. Print all properties on separate lines.",
        "code": "let student = {\n  name: 'John',\n  age: 15\n};\nstudent.grade = 'A';\nconsole.log(student.name);\nconsole.log(student.age);\nconsole.log(student.grade);",
        "expected_output": "John\n15\nA"
      }
    }
]
