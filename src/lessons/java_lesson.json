[
    {
      "id": 1,
      "language": "Java",
      "title": "Introduction to Java",
      "description": "Learn the basics of Java programming.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will cover basic Java syntax and how to print to the console."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a Java program to print Hello, World! on the output",
        "code": "public class Main { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }",
        "expected_output": "Hello, World!"
      }
    },
    {
      "id": 2,
      "language": "Java",
      "title": "Java Variables and Data Types",
      "description": "Learn how to declare variables and use basic data types in Java.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will learn about Java variables and data types."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int age = 25;\n    double height = 5.9;\n    String name = \"John\";\n    System.out.println(\"Name: \" + name);\n    System.out.println(\"Age: \" + age);\n    System.out.println(\"Height: \" + height);\n  }\n}"
        }
      ],
      "test": {
        "question": "Declare an integer variable 'age' with value 30 and print it.",
        "code": "public class Main { public static void main(String[] args) { int age = 30; System.out.println(age); } }",
        "expected_output": "30"
      }
    },
    {
      "id": 3,
      "language": "Java",
      "title": "Java Conditional Statements",
      "description": "Learn how to use if-else statements in Java.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we will learn how to use if-else statements to control the flow of execution."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int number = 10;\n    if (number > 0) {\n      System.out.println(\"Positive Number\");\n    } else {\n      System.out.println(\"Negative Number\");\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a Java program to check if a number is positive or negative.",
        "code": "public class Main { public static void main(String[] args) { int number = -5; if (number > 0) { System.out.println(\"Positive Number\"); } else { System.out.println(\"Negative Number\"); } } }",
        "expected_output": "Negative Number"
      }
    },
    {
      "id": 4,
      "language": "Java",
      "title": "For Loops in Java",
      "description": "Learn how to use for loops to repeat actions.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we'll learn about for loops in Java. A for loop allows you to execute a block of code multiple times. It's especially useful when you want to perform an action a specific number of times. The for loop has three parts: initialization, condition, and increment/decrement."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    for(int i = 1; i <= 5; i++) {\n      System.out.println(\"Count: \" + i);\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a program that prints numbers from 1 to 5 using a for loop. Each number should be on a new line.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "1\n2\n3\n4\n5"
      }
    },
    {
      "id": 5,
      "language": "Java",
      "title": "While Loops",
      "description": "Learn how to use while loops for repeated actions.",
      "content": [
        {
          "type": "text",
          "content": "While loops execute a block of code as long as a condition is true. They're useful when you don't know exactly how many times you need to repeat something. In this lesson, we'll learn how to use while loops effectively and see how they differ from for loops."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int count = 1;\n    while(count <= 3) {\n      System.out.println(\"Loop iteration: \" + count);\n      count++;\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a program using a while loop that prints 'Hello' exactly 3 times, each on a new line.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "Hello\nHello\nHello"
      }
    },
    {
      "id": 6,
      "language": "Java",
      "title": "Arrays Basics",
      "description": "Learn how to work with arrays to store multiple values.",
      "content": [
        {
          "type": "text",
          "content": "Arrays are used to store multiple values in a single variable. Think of an array as a container that can hold a fixed number of values of the same type. In this lesson, we'll learn how to create arrays, access their elements, and perform basic operations with them."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int[] numbers = {1, 2, 3, 4, 5};\n    System.out.println(\"First number: \" + numbers[0]);\n    System.out.println(\"Last number: \" + numbers[4]);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an array with values [10, 20, 30] and print all elements on separate lines.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "10\n20\n30"
      }
    },
    {
      "id": 7,
      "language": "Java",
      "title": "Array Operations",
      "description": "Learn how to manipulate and process arrays.",
      "content": [
        {
          "type": "text",
          "content": "In this lesson, we'll learn more advanced operations with arrays, including finding the sum of elements and calculating averages. We'll use loops to process array elements and perform calculations on them."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int[] numbers = {2, 4, 6, 8};\n    int sum = 0;\n    for(int i = 0; i < numbers.length; i++) {\n      sum += numbers[i];\n    }\n    System.out.println(\"Sum: \" + sum);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an array with values [5, 10, 15] and print their sum.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "30"
      }
    },
    {
      "id": 8,
      "language": "Java",
      "title": "Methods Basics",
      "description": "Learn how to create and use methods in Java.",
      "content": [
        {
          "type": "text",
          "content": "Methods are blocks of code that perform specific tasks. They help us organize our code and make it reusable. In this lesson, we'll learn how to create methods, pass parameters to them, and return values from them."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static int addNumbers(int a, int b) {\n    return a + b;\n  }\n  \n  public static void main(String[] args) {\n    int result = addNumbers(5, 3);\n    System.out.println(\"Sum: \" + result);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create a method called 'multiply' that takes two numbers and returns their product. In main, multiply 6 and 4 and print the result.",
        "code": "public class Main {\n  // Write your method here\n  \n  public static void main(String[] args) {\n    // Call your method here\n  }\n}",
        "expected_output": "24"
      }
    },
    {
      "id": 9,
      "language": "Java",
      "title": "Method Parameters",
      "description": "Learn about different types of method parameters.",
      "content": [
        {
          "type": "text",
          "content": "Methods can accept different types of parameters and return different types of values. In this lesson, we'll explore how to work with multiple parameters of different types and how to use them effectively in our methods."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static String formatName(String firstName, String lastName) {\n    return firstName + \" \" + lastName;\n  }\n  \n  public static void main(String[] args) {\n    String fullName = formatName(\"John\", \"Doe\");\n    System.out.println(fullName);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create a method that takes a person's name and age as parameters and prints 'Name: [name], Age: [age]'. Call it with name 'Alice' and age 15.",
        "code": "public class Main {\n  // Write your method here\n  \n  public static void main(String[] args) {\n    // Call your method here\n  }\n}",
        "expected_output": "Name: Alice, Age: 15"
      }
    },
    {
      "id": 10,
      "language": "Java",
      "title": "String Operations",
      "description": "Learn how to manipulate strings in Java.",
      "content": [
        {
          "type": "text",
          "content": "Strings are one of the most commonly used data types in Java. In this lesson, we'll learn about various string operations including concatenation, finding length, and extracting parts of strings."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    String text = \"Hello Java\";\n    System.out.println(\"Length: \" + text.length());\n    System.out.println(\"Uppercase: \" + text.toUpperCase());\n  }\n}"
        }
      ],
      "test": {
        "question": "Create a string with value 'Programming' and print its length followed by the string in uppercase, each on a new line.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "11\nPROGRAMMING"
      }
    },
    {
      "id": 11,
      "language": "Java",
      "title": "Math Operations",
      "description": "Learn about mathematical operations in Java.",
      "content": [
        {
          "type": "text",
          "content": "Java provides various mathematical operations that we can use in our programs. In this lesson, we'll learn about basic arithmetic operations and some commonly used math functions."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 3;\n    System.out.println(\"Sum: \" + (a + b));\n    System.out.println(\"Product: \" + (a * b));\n    System.out.println(\"Quotient: \" + (a / b));\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a program that calculates and prints the average of numbers 10, 20, and 30.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "20"
      }
    },
    {
      "id": 12,
      "language": "Java",
      "title": "Switch Statements",
      "description": "Learn how to use switch statements for multiple conditions.",
      "content": [
        {
          "type": "text",
          "content": "Switch statements provide an efficient way to handle multiple conditions. They're especially useful when you need to compare a single variable against several values. In this lesson, we'll learn how to use switch statements effectively."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int day = 1;\n    switch(day) {\n      case 1:\n        System.out.println(\"Monday\");\n        break;\n      case 2:\n        System.out.println(\"Tuesday\");\n        break;\n      default:\n        System.out.println(\"Other day\");\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a program using switch statement that prints 'Good' for number 1, 'Better' for number 2, and 'Best' for number 3. Use number 2 in your program.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "Better"
      }
    },
    {
      "id": 13,
      "language": "Java",
      "title": "Nested Loops",
      "description": "Learn how to use loops inside other loops.",
      "content": [
        {
          "type": "text",
          "content": "Nested loops are loops within loops. They're useful when you need to perform repetitive tasks in multiple dimensions, like processing a grid or creating patterns. In this lesson, we'll learn how to work with nested loops effectively."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    for(int i = 1; i <= 3; i++) {\n      for(int j = 1; j <= 2; j++) {\n        System.out.println(\"i: \" + i + \", j: \" + j);\n      }\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Write a program using nested loops to print a 3x3 grid of stars (*), with each row on a new line.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "***\n***\n***"
      }
    },
    {
      "id": 14,
      "language": "Java",
      "title": "Method Overloading",
      "description": "Learn how to create multiple methods with the same name.",
      "content": [
        {
          "type": "text",
          "content": "Method overloading allows us to create multiple methods with the same name but different parameters. This makes our code more flexible and easier to use. In this lesson, we'll learn how to create and use overloaded methods."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static int add(int a, int b) {\n    return a + b;\n  }\n  \n  public static double add(double a, double b) {\n    return a + b;\n  }\n  \n  public static void main(String[] args) {\n    System.out.println(add(5, 3));\n    System.out.println(add(2.5, 3.5));\n  }\n}"
        }
      ],
      "test": {
        "question": "Create two overloaded methods named 'multiply': one that multiplies two integers and one that multiplies three integers. Call the three-parameter version with numbers 2, 3, and 4 and print the result.",
        "code": "public class Main {\n  // Write your methods here\n  \n  public static void main(String[] args) {\n    // Call your method here\n  }\n}",
        "expected_output": "24"
      }
    },
    {
      "id": 15,
      "language": "Java",
      "title": "Array Patterns",
      "description": "Learn to create and manipulate array patterns.",
      "content": [
        {
          "type": "text",
          "content": "Arrays can be used to create interesting patterns and sequences. In this lesson, we'll learn how to create and manipulate arrays to generate specific patterns. We'll combine our knowledge of loops and arrays to solve more complex problems."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    int[] sequence = new int[5];\n    for(int i = 0; i < 5; i++) {\n      sequence[i] = i * 2;\n    }\n    for(int i = 0; i < 5; i++) {\n      System.out.println(sequence[i]);\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an array of 5 elements where each element is triple the previous element, starting with 1. Print all elements on separate lines.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    // Write your code here\n  }\n}",
        "expected_output": "1\n3\n9\n27\n81"
      }
    },
    {
      "id": 16,
      "language": "Java",
      "title": "ArrayList Basics",
      "description": "Learn how to use ArrayList in Java.",
      "content": [
        {
          "type": "text",
          "content": "ArrayList is a dynamic array implementation that can grow and shrink in size. Unlike regular arrays, ArrayList can automatically resize itself. In this lesson, we'll learn how to create and manipulate ArrayLists to store and manage collections of elements."
        },
        {
          "type": "code",
          "content": "import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<>();\n    numbers.add(10);\n    numbers.add(20);\n    numbers.add(30);\n    System.out.println(numbers);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an ArrayList of integers, add numbers 5, 10, 15 in order, then print each number on a new line using a for loop.",
        "code": "import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> list = new ArrayList<>();\n    list.add(5);\n    list.add(10);\n    list.add(15);\n    for(int num : list) {\n      System.out.println(num);\n    }\n  }\n}",
        "expected_output": "5\n10\n15"
      }
    },
    {
      "id": 17,
      "language": "Java",
      "title": "LinkedList Operations",
      "description": "Learn how to use LinkedList in Java.",
      "content": [
        {
          "type": "text",
          "content": "LinkedList is a linear data structure where elements are stored in nodes, and each node points to the next node. In this lesson, we'll learn how to create and manipulate LinkedLists, and understand when to use them instead of ArrayList."
        },
        {
          "type": "code",
          "content": "import java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList<String> list = new LinkedList<>();\n    list.add(\"First\");\n    list.addLast(\"Last\");\n    list.addFirst(\"Start\");\n    System.out.println(list);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create a LinkedList of strings, add 'One', 'Two', 'Three' in order, then print only the first and last elements on separate lines.",
        "code": "import java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList<String> list = new LinkedList<>();\n    list.add(\"One\");\n    list.add(\"Two\");\n    list.add(\"Three\");\n    System.out.println(list.getFirst());\n    System.out.println(list.getLast());\n  }\n}",
        "expected_output": "One\nThree"
      }
    },
    {
      "id": 18,
      "language": "Java",
      "title": "Queue Implementation",
      "description": "Learn how to implement and use Queues in Java.",
      "content": [
        {
          "type": "text",
          "content": "A Queue is a linear data structure that follows First-In-First-Out (FIFO) principle. In this lesson, we'll learn how to use Queue interface and its implementation using LinkedList to create and manage queues."
        },
        {
          "type": "code",
          "content": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Main {\n  public static void main(String[] args) {\n    Queue<Integer> queue = new LinkedList<>();\n    queue.offer(1);\n    queue.offer(2);\n    queue.offer(3);\n    System.out.println(\"Front element: \" + queue.peek());\n  }\n}"
        }
      ],
      "test": {
        "question": "Create a Queue, add numbers 10, 20, 30 in order, then remove and print each number using poll().",
        "code": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Main {\n  public static void main(String[] args) {\n    Queue<Integer> queue = new LinkedList<>();\n    queue.offer(10);\n    queue.offer(20);\n    queue.offer(30);\n    System.out.println(queue.poll());\n    System.out.println(queue.poll());\n    System.out.println(queue.poll());\n  }\n}",
        "expected_output": "10\n20\n30"
      }
    },
    {
      "id": 19,
      "language": "Java",
      "title": "Stack Operations",
      "description": "Learn how to use Stack in Java.",
      "content": [
        {
          "type": "text",
          "content": "A Stack is a linear data structure that follows Last-In-First-Out (LIFO) principle. In this lesson, we'll learn how to use the Stack class to push and pop elements, and understand common stack operations."
        },
        {
          "type": "code",
          "content": "import java.util.Stack;\n\npublic class Main {\n  public static void main(String[] args) {\n    Stack<String> stack = new Stack<>();\n    stack.push(\"First\");\n    stack.push(\"Second\");\n    stack.push(\"Third\");\n    System.out.println(\"Top element: \" + stack.peek());\n  }\n}"
        }
      ],
      "test": {
        "question": "Create a Stack, push numbers 1, 2, 3 in order, then pop and print each number (they should come out in reverse order).",
        "code": "import java.util.Stack;\n\npublic class Main {\n  public static void main(String[] args) {\n    Stack<Integer> stack = new Stack<>();\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    System.out.println(stack.pop());\n    System.out.println(stack.pop());\n    System.out.println(stack.pop());\n  }\n}",
        "expected_output": "3\n2\n1"
      }
    },
    {
      "id": 20,
      "language": "Java",
      "title": "ArrayList vs LinkedList",
      "description": "Learn the differences between ArrayList and LinkedList.",
      "content": [
        {
          "type": "text",
          "content": "ArrayList and LinkedList have different internal implementations and performance characteristics. In this lesson, we'll compare both data structures and learn when to use each one through practical examples."
        },
        {
          "type": "code",
          "content": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> arrayList = new ArrayList<>();\n    LinkedList<Integer> linkedList = new LinkedList<>();\n    \n    arrayList.add(1);\n    linkedList.add(1);\n    \n    System.out.println(\"ArrayList: \" + arrayList);\n    System.out.println(\"LinkedList: \" + linkedList);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create both ArrayList and LinkedList, add number 100 to each, and print them on separate lines.",
        "code": "import java.util.ArrayList;\nimport java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> al = new ArrayList<>();\n    LinkedList<Integer> ll = new LinkedList<>();\n    al.add(100);\n    ll.add(100);\n    System.out.println(al);\n    System.out.println(ll);\n  }\n}",
        "expected_output": "[100]\n[100]"
      }
    },
    {
      "id": 21,
      "language": "Java",
      "title": "Enhanced For Loop",
      "description": "Learn about the enhanced for loop (for-each loop) in Java.",
      "content": [
        {
          "type": "text",
          "content": "The enhanced for loop provides a simpler way to iterate over arrays and collections. In this lesson, we'll learn how to use this loop effectively and understand its limitations compared to the traditional for loop."
        },
        {
          "type": "code",
          "content": "import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> names = new ArrayList<>();\n    names.add(\"Alice\");\n    names.add(\"Bob\");\n    for(String name : names) {\n      System.out.println(name);\n    }\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an array of integers [1,2,3] and use enhanced for loop to print each number multiplied by 2 on a new line.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    int[] numbers = {1, 2, 3};\n    for(int num : numbers) {\n      System.out.println(num * 2);\n    }\n  }\n}",
        "expected_output": "2\n4\n6"
      }
    },
    {
      "id": 22,
      "language": "Java",
      "title": "String Builder",
      "description": "Learn how to use StringBuilder for efficient string manipulation.",
      "content": [
        {
          "type": "text",
          "content": "StringBuilder provides a mutable sequence of characters for efficient string manipulation. In this lesson, we'll learn how to use StringBuilder to modify strings without creating multiple String objects."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"Hello\");\n    sb.append(\" \");\n    sb.append(\"World\");\n    System.out.println(sb.toString());\n  }\n}"
        }
      ],
      "test": {
        "question": "Using StringBuilder, create the string 'Java Programming' by appending the words separately, then print it.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"Java\");\n    sb.append(\" \");\n    sb.append(\"Programming\");\n    System.out.println(sb.toString());\n  }\n}",
        "expected_output": "Java Programming"
      }
    },
    {
      "id": 23,
      "language": "Java",
      "title": "Array Sorting",
      "description": "Learn how to sort arrays in Java.",
      "content": [
        {
          "type": "text",
          "content": "Java provides built-in methods to sort arrays. In this lesson, we'll learn how to use Arrays.sort() method to sort different types of arrays and understand how to sort in ascending and descending order."
        },
        {
          "type": "code",
          "content": "import java.util.Arrays;\n\npublic class Main {\n  public static void main(String[] args) {\n    int[] numbers = {3, 1, 4, 1, 5};\n    Arrays.sort(numbers);\n    System.out.println(Arrays.toString(numbers));\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an array with numbers [5,2,8,1,9], sort it, and print each number on a new line.",
        "code": "import java.util.Arrays;\n\npublic class Main {\n  public static void main(String[] args) {\n    int[] arr = {5,2,8,1,9};\n    Arrays.sort(arr);\n    for(int num : arr) {\n      System.out.println(num);\n    }\n  }\n}",
        "expected_output": "1\n2\n5\n8\n9"
      }
    },
    {
      "id": 24,
      "language": "Java",
      "title": "ArrayList Sorting",
      "description": "Learn how to sort ArrayLists in Java.",
      "content": [
        {
          "type": "text",
          "content": "Collections framework provides methods to sort Lists including ArrayList. In this lesson, we'll learn how to sort ArrayLists of different types and understand the Collections.sort() method."
        },
        {
          "type": "code",
          "content": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<>();\n    numbers.add(3);\n    numbers.add(1);\n    numbers.add(4);\n    Collections.sort(numbers);\n    System.out.println(numbers);\n  }\n}"
        }
      ],
      "test": {
        "question": "Create an ArrayList with numbers [5,2,8,1,9], sort it, and print each number on a new line.",
        "code": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> list = new ArrayList<>();\n    list.add(5);\n    list.add(2);\n    list.add(8);\n    list.add(1);\n    list.add(9);\n    Collections.sort(list);\n    for(int num : list) {\n      System.out.println(num);\n    }\n  }\n}",
        "expected_output": "1\n2\n5\n8\n9"
      }
    },
    {
      "id": 25,
      "language": "Java",
      "title": "Math Class Methods",
      "description": "Learn about useful methods in the Math class.",
      "content": [
        {
          "type": "text",
          "content": "Java's Math class provides many useful mathematical operations and constants. In this lesson, we'll learn about commonly used Math class methods like max(), min(), abs(), and pow()."
        },
        {
          "type": "code",
          "content": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(Math.max(10, 20));\n    System.out.println(Math.min(10, 20));\n    System.out.println(Math.abs(-15));\n    System.out.println(Math.pow(2, 3));\n  }\n}"
        }
      ],
      "test": {
        "question": "Print the absolute value of -25 and then the maximum of 30 and 45 on separate lines.",
        "code": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(Math.abs(-25));\n    System.out.println(Math.max(30, 45));\n  }\n}",
        "expected_output": "25\n45"
      }
    }
]
