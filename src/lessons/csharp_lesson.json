[
    {
      "id": 1,
      "language": "C#",
      "title": "Introduction to C#",
      "description": "Learn the basics of C# programming.",
      "content": [
        {
          "type": "text",
          "content": "Welcome to C#! Think of C# as a language you use to give instructions to your computer. Every C# program starts with a special block called 'Main' - it's like the starting point of your journey. The 'Console.WriteLine' command is like telling your computer to display a message on the screen. When you write your first program, you're essentially telling the computer to show a message to whoever runs your program. C# is really good at understanding what you want it to do, as long as you follow its rules!"
        },
        {
          "type": "code",
          "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Hello World!\");\n    }\n}"
        }
      ],
      "test": {
        "question": "Write a C# program that prints exactly 'My First Program' to the screen.",
        "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"My First Program\");\n    }\n}",
        "expected_output": "My First Program"
      }
    },
    {
      "id": 2,
      "language": "C#",
      "title": "Variables in C#",
      "description": "Learn how to use variables to store information.",
      "content": [
        {
          "type": "text",
          "content": "Variables are like labeled boxes where we can store different kinds of information. Just like you might have different boxes for your books, toys, and clothes, in C# we have different types of variables for different kinds of data. For example, 'int' is for whole numbers, 'string' is for text, and 'double' is for decimal numbers. When we create a variable, we give it a name and can store a value in it. It's like putting something in a box and giving that box a label so we can find it later!"
        },
        {
          "type": "code",
          "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int age = 13;\n        string name = \"Alex\";\n        Console.WriteLine(\"Age: \" + age);\n        Console.WriteLine(\"Name: \" + name);\n    }\n}"
        }
      ],
      "test": {
        "question": "Create a program that declares a variable 'score' with value 100 and prints it.",
        "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int score = 100;\n        Console.WriteLine(score);\n    }\n}",
        "expected_output": "100"
      }
    },
    {
      "id": 3,
      "language": "C#",
      "title": "Basic Math Operations",
      "description": "Learn how to perform basic math calculations in C#.",
      "content": [
        {
          "type": "text",
          "content": "C# can work as a super-powerful calculator! You can add (+), subtract (-), multiply (*), and divide (/) numbers. Just like in math class, C# follows the order of operations - multiplication and division happen before addition and subtraction. You can also use parentheses to group operations together, just like in algebra. These operations work with both whole numbers (integers) and decimal numbers (doubles), making C# great for all kinds of calculations!"
        },
        {
          "type": "code",
          "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int sum = 5 + 3;\n        int product = 4 * 2;\n        Console.WriteLine(\"Sum: \" + sum);\n        Console.WriteLine(\"Product: \" + product);\n    }\n}"
        }
      ],
      "test": {
        "question": "Create a program that multiplies 6 and 8 and prints the result.",
        "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int result = 6 * 8;\n        Console.WriteLine(result);\n    }\n}",
        "expected_output": "48"
      }
    },
    {
      "id": 4,
      "language": "C#",
      "title": "String Operations",
      "description": "Learn how to work with text in C#.",
      "content": [
        {
          "type": "text",
          "content": "Strings in C# are like word processors for text! You can join strings together (concatenation), find out how long they are, convert them to uppercase or lowercase, and much more. When you join strings, you use the + symbol, just like adding numbers, but instead of adding mathematically, it connects the text together. C# strings are really smart - they can include letters, numbers, spaces, and special characters, making them perfect for creating messages or working with text!"
        },
        {
          "type": "code",
          "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        string first = \"Hello\";\n        string second = \"World\";\n        string message = first + \" \" + second;\n        Console.WriteLine(message);\n    }\n}"
        }
      ],
      "test": {
        "question": "Create a program that combines the strings 'C#' and 'Programming' with a space between them and prints the result.",
        "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        string result = \"C#\" + \" \" + \"Programming\";\n        Console.WriteLine(result);\n    }\n}",
        "expected_output": "C# Programming"
      }
    },
    {
      "id": 5,
      "language": "C#",
      "title": "If Statements",
      "description": "Learn how to make decisions in your code.",
      "content": [
        {
          "type": "text",
          "content": "If statements are like making decisions in your code! Just like you might decide what to wear based on the weather, your program can decide what to do based on certain conditions. The if statement checks if something is true or false, and then runs specific code based on that check. You can use comparison operators like greater than (>), less than (<), or equals (==) to make these decisions. It's like creating a set of rules for your program to follow!"
        },
        {
          "type": "code",
          "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int number = 10;\n        if (number > 5)\n        {\n            Console.WriteLine(\"Greater than 5\");\n        }\n    }\n}"
        }
      ],
      "test": {
        "question": "Create a program that checks if the number 7 is greater than 5 and prints 'Yes' if it is.",
        "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int number = 7;\n        if (number > 5)\n        {\n            Console.WriteLine(\"Yes\");\n        }\n    }\n}",
        "expected_output": "Yes"
      }
    },
    {
        "id": 6,
        "language": "C#",
        "title": "Functions in C#",
        "description": "Learn how to create and use functions.",
        "content": [
          {
            "type": "text",
            "content": "Functions are like mini-programs within your program. They are blocks of code that perform specific tasks and can be used multiple times. Think of functions as recipes - once you write the instructions, you can follow them whenever you need to! In C#, we declare functions using 'void' when they don't return any value, or with a type (like 'int' or 'string') when they do return something."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Greet()\n    {\n        Console.WriteLine(\"Hello from the function!\");\n    }\n    \n    static void Main()\n    {\n        Greet();\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a function named 'DisplayMessage' that prints 'Function Called!'",
          "code": "using System;\n\nclass Program\n{\n    static void DisplayMessage()\n    {\n        Console.WriteLine(\"Function Called!\");\n    }\n    \n    static void Main()\n    {\n        DisplayMessage();\n    }\n}",
          "expected_output": "Function Called!"
        }
      },
      {
        "id": 7,
        "language": "C#",
        "title": "Loops - While",
        "description": "Learn how to repeat actions using while loops.",
        "content": [
          {
            "type": "text",
            "content": "While loops are like a repeat button - they keep doing something as long as a condition is true. Imagine telling someone to keep jumping until they've jumped 5 times. The while loop works the same way - it checks a condition and if it's true, it runs the code inside it, then checks again, and keeps going until the condition becomes false."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int count = 1;\n        while (count <= 3)\n        {\n            Console.WriteLine(\"Count: \" + count);\n            count = count + 1;\n        }\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a while loop that prints the numbers 1, 2, 3 on separate lines.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int i = 1;\n        while (i <= 3)\n        {\n            Console.WriteLine(i);\n            i++;\n        }\n    }\n}",
          "expected_output": "1\n2\n3"
        }
      },
      {
        "id": 8,
        "language": "C#",
        "title": "For Loops",
        "description": "Learn how to use for loops for repetitive tasks.",
        "content": [
          {
            "type": "text",
            "content": "For loops are like while loops but more organized! They combine three things in one line: where to start, when to stop, and how to count. It's like saying 'I want to count from 1 to 5, going up by 1 each time.' For loops are perfect when you know exactly how many times you want to repeat something."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        for (int i = 1; i <= 3; i++)\n        {\n            Console.WriteLine(\"Loop number \" + i);\n        }\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a for loop that prints the numbers 1 to 5 on separate lines.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        for (int i = 1; i <= 5; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}",
          "expected_output": "1\n2\n3\n4\n5"
        }
      },
      {
        "id": 9,
        "language": "C#",
        "title": "Arrays",
        "description": "Learn how to work with collections of data.",
        "content": [
          {
            "type": "text",
            "content": "Arrays are like organized containers that can hold multiple items of the same type. Think of an array as a row of numbered boxes - each box can hold one item, and you can find any item by its position number (index). Arrays are great when you need to store multiple related values, like a list of scores or names."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = {1, 2, 3, 4, 5};\n        Console.WriteLine(\"First number: \" + numbers[0]);\n        Console.WriteLine(\"Last number: \" + numbers[4]);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create an array of three numbers (2,4,6) and print the second number (index 1).",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = {2, 4, 6};\n        Console.WriteLine(numbers[1]);\n    }\n}",
          "expected_output": "4"
        }
      },
      {
        "id": 10,
        "language": "C#",
        "title": "Functions with Return Values",
        "description": "Learn how to create functions that give back values.",
        "content": [
          {
            "type": "text",
            "content": "Sometimes we want our functions to not just do something, but also give us back a result. These are called functions with return values. It's like asking someone to solve a math problem - you don't just want them to do the calculation, you want them to tell you the answer! In C#, we specify what type of value the function will return instead of using 'void'."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static int Add(int a, int b)\n    {\n        return a + b;\n    }\n    \n    static void Main()\n    {\n        int result = Add(5, 3);\n        Console.WriteLine(result);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a function called 'Double' that takes a number and returns twice that number. Call it with 5 and print the result.",
          "code": "using System;\n\nclass Program\n{\n    static int Double(int number)\n    {\n        return number * 2;\n    }\n    \n    static void Main()\n    {\n        int result = Double(5);\n        Console.WriteLine(result);\n    }\n}",
          "expected_output": "10"
        }
      },
      {
        "id": 11,
        "language": "C#",
        "title": "Simple Methods",
        "description": "Learn how to create basic methods in C#.",
        "content": [
          {
            "type": "text",
            "content": "Methods are like functions but they belong to a class. They are the actions that your program can perform. Think of methods as verbs - they do things! A method can be as simple as printing a message or as complex as calculating complex mathematics. Every method has a name and can have a return type that tells us what kind of result it gives back."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static string GetMessage()\n    {\n        return \"Hello from the method!\";\n    }\n    \n    static void Main()\n    {\n        string message = GetMessage();\n        Console.WriteLine(message);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a method called 'GetGreeting' that returns the string 'Welcome!' and print it.",
          "code": "using System;\n\nclass Program\n{\n    static string GetGreeting()\n    {\n        return \"Welcome!\";\n    }\n    \n    static void Main()\n    {\n        string greeting = GetGreeting();\n        Console.WriteLine(greeting);\n    }\n}",
          "expected_output": "Welcome!"
        }
      },
      {
        "id": 12,
        "language": "C#",
        "title": "Boolean Logic",
        "description": "Learn about true/false conditions in C#.",
        "content": [
          {
            "type": "text",
            "content": "Boolean values are like yes/no questions - they can only be true or false. We use them to make decisions in our code. You can combine boolean values using special operators like && (AND) and || (OR). It's like in real life when you say 'I'll go to the park if it's sunny AND warm' - both conditions need to be true!"
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        bool isTrue = true;\n        bool isFalse = false;\n        Console.WriteLine(\"True AND False is: \" + (isTrue && isFalse));\n        Console.WriteLine(\"True OR False is: \" + (isTrue || isFalse));\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a program that declares two boolean variables 'a=true' and 'b=true' and prints the result of a AND b.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        bool a = true;\n        bool b = true;\n        Console.WriteLine(a && b);\n    }\n}",
          "expected_output": "True"
        }
      },
      {
        "id": 13,
        "language": "C#",
        "title": "String Methods",
        "description": "Learn about useful string operations in C#.",
        "content": [
          {
            "type": "text",
            "content": "Strings in C# come with many built-in methods that help us work with text. You can find the length of a string, convert it to upper or lower case, or find parts of the string. These methods are like having a swiss army knife for working with text - there's a tool for every job!"
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        string text = \"Hello World\";\n        string upper = text.ToUpper();\n        Console.WriteLine(upper);\n        Console.WriteLine(\"Length: \" + text.Length);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a program that takes the string 'Learn C#' and prints its length.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        string text = \"Learn C#\";\n        Console.WriteLine(text.Length);\n    }\n}",
          "expected_output": "8"
        }
      },
      {
        "id": 14,
        "language": "C#",
        "title": "Math Operations",
        "description": "Learn about advanced math operations in C#.",
        "content": [
          {
            "type": "text",
            "content": "C# has many built-in math operations beyond just adding and subtracting. You can find the maximum or minimum of two numbers, round decimal numbers, or even calculate powers. These operations help you solve more complex math problems with just a single line of code!"
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int max = Math.Max(10, 20);\n        int min = Math.Min(10, 20);\n        Console.WriteLine(\"Maximum: \" + max);\n        Console.WriteLine(\"Minimum: \" + min);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a program that finds the maximum between 15 and 25 and prints it.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int result = Math.Max(15, 25);\n        Console.WriteLine(result);\n    }\n}",
          "expected_output": "25"
        }
      },
      {
        "id": 15,
        "language": "C#",
        "title": "Array Methods",
        "description": "Learn about operations you can perform on arrays.",
        "content": [
          {
            "type": "text",
            "content": "Arrays in C# come with helpful methods that let us work with collections of data. We can find out how many items are in an array, sort the items, or reverse their order. These methods make it easy to organize and manipulate groups of data in your programs."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = {3, 1, 4, 1, 5};\n        Array.Sort(numbers);\n        Console.WriteLine(numbers[0]);\n        Console.WriteLine(numbers[4]);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create an array with numbers [5,2,8], sort it, and print the first number.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = {5, 2, 8};\n        Array.Sort(numbers);\n        Console.WriteLine(numbers[0]);\n    }\n}",
          "expected_output": "2"
        }
      },
      {
        "id": 16,
        "language": "C#",
        "title": "Compound Assignment",
        "description": "Learn about shortcut operators in C#.",
        "content": [
          {
            "type": "text",
            "content": "C# provides shortcuts for common math operations on variables. Instead of writing 'x = x + 5', you can write 'x += 5'. These compound assignment operators make your code shorter and easier to read. They work with addition, subtraction, multiplication, and division!"
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int number = 5;\n        number += 3;\n        Console.WriteLine(number);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a program that starts with number=10, adds 5 using += operator, and prints the result.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int number = 10;\n        number += 5;\n        Console.WriteLine(number);\n    }\n}",
          "expected_output": "15"
        }
      },
      {
        "id": 17,
        "language": "C#",
        "title": "String Formatting",
        "description": "Learn about different ways to format strings.",
        "content": [
          {
            "type": "text",
            "content": "C# offers multiple ways to format strings and combine them with other values. String interpolation using $ lets you insert variables directly into strings using {}. It's like having a template where you can plug in different values easily!"
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        string name = \"Alex\";\n        int age = 15;\n        Console.WriteLine($\"Name: {name}, Age: {age}\");\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a program that uses string interpolation to print 'Score: 100'.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int score = 100;\n        Console.WriteLine($\"Score: {score}\");\n    }\n}",
          "expected_output": "Score: 100"
        }
      },
      {
        "id": 18,
        "language": "C#",
        "title": "Constants",
        "description": "Learn about values that cannot change.",
        "content": [
          {
            "type": "text",
            "content": "Constants are like variables that can never change their value. Once you set their value, it stays the same throughout your program. We use the 'const' keyword to create constants. They're perfect for values that should never change, like the number of days in a week or the value of pi."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        const int DaysInWeek = 7;\n        Console.WriteLine(\"Days in a week: \" + DaysInWeek);\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a constant named 'MaxScore' with value 100 and print it.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        const int MaxScore = 100;\n        Console.WriteLine(MaxScore);\n    }\n}",
          "expected_output": "100"
        }
      },
      {
        "id": 19,
        "language": "C#",
        "title": "Simple Type Conversion",
        "description": "Learn how to convert between different data types.",
        "content": [
          {
            "type": "text",
            "content": "Sometimes we need to convert data from one type to another. For example, we might need to convert a number to a string to display it, or convert a string representing a number into an actual number. C# provides simple ways to convert between different types safely."
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int number = 42;\n        string text = number.ToString();\n        Console.WriteLine(\"The number is: \" + text);\n    }\n}"
          }
        ],
        "test": {
          "question": "Convert the number 25 to a string and print it.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int number = 25;\n        string text = number.ToString();\n        Console.WriteLine(text);\n    }\n}",
          "expected_output": "25"
        }
      },
      {
        "id": 20,
        "language": "C#",
        "title": "Comments in Code",
        "description": "Learn how to add notes to your code.",
        "content": [
          {
            "type": "text",
            "content": "Comments are notes that we add to our code to explain what it does. They're like leaving sticky notes in a book - they help us and others understand the code better. C# ignores anything after // on a line, so we can write whatever notes we want. Comments make our code easier to understand and maintain!"
          },
          {
            "type": "code",
            "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // This is a comment\n        int score = 95;    // Stores the player's score\n        Console.WriteLine(score);  // Display the score\n    }\n}"
          }
        ],
        "test": {
          "question": "Create a program that declares a variable 'age = 15' with a comment '// Student's age' and prints the age.",
          "code": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Student's age\n        int age = 15;\n        Console.WriteLine(age);\n    }\n}",
          "expected_output": "15"
        }
      }
  ]